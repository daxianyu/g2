#!/usr/bin/env node
const Nightmare = require('nightmare');
const commander = require('commander');
const connect = require('connect');
const getPort = require('get-port');
const glob = require('glob');
const http = require('http');
const serveStatic = require('serve-static');
const {
  // basename,
  resolve
} = require('path');
const {
  mkdir
} = require('shelljs');
const pkg = require('../package.json');

commander
  .version(pkg.version)
  .option('-w, --width <width>', 'width', 800)
  .option('-h, --height <height>', 'height', 600)
  .option('--delay <delay>', 'delay', 5000)
  .option('-f, --file <file>', 'file', 'index')
  .option('--show', 'show')
  .parse(process.argv);

const {
  delay,
  file,
  height,
  show,
  width
} = commander;

const demosRoot = resolve(__dirname, '../demos');
const screenshotsPath = resolve(demosRoot, `./assets/screenshots/${width}x${height}`);

mkdir('-p', screenshotsPath);

getPort().then(port => {
  const server = connect();
  server.use(serveStatic(process.cwd()));
  http.createServer(server).listen(port);

  console.log('start capturing...');
  const fileBasename = file
    .replace(/\.html$/, '')
    .replace(/^\./, '')
    .replace(/\//, '');
  if (!/^assets/.test(fileBasename)) {
    const outputFilename = resolve(screenshotsPath, `./${fileBasename}.png`);
    const t0 = Date.now();
    const nightmare = Nightmare({
      show,
    });
    nightmare
      .viewport(width, height)
      .goto(`http://127.0.0.1:${port}/demos/${fileBasename}.html`)
      .wait('#canvas canvas')
      .wait(delay)
      .click('#canvas')
      .screenshot(outputFilename, () => {
        // console.log(`sreenshot token: ${outputFilename}`);
        console.log(`${fileBasename} toke ${Date.now() - t0} to take a screenshot.`);
        process.exit(0);
      })
      .end()
      .catch(e => {
        console.error(e);
        process.exit(1);
      });
  }
});

