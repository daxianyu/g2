#!/usr/bin/env node
const MAX_POOL_SIZE = require('os').cpus().length;
const Nightmare = require('nightmare');
const commander = require('commander');
const connect = require('connect');
const getPort = require('get-port');
const glob = require('glob');
const http = require('http');
const serveStatic = require('serve-static');
const {
  queue
} = require('d3-queue');
const {
  each
} = require('lodash');
const {
  // basename,
  resolve
} = require('path');
const {
  mkdir
} = require('shelljs');
const pkg = require('../package.json');

commander
  .version(pkg.version)
  .option('-w, --width <width>', 'width', 800)
  .option('-h, --height <height>', 'height', 600)
  .parse(process.argv);

const {
  width,
  height
} = commander;

const demosRoot = resolve(__dirname, '../demos');
const screenshotsPath = resolve(demosRoot, `./assets/screenshots/${width}x${height}`);

mkdir('-p', screenshotsPath);

getPort().then(port => {
  const server = connect();
  server.use(serveStatic(process.cwd()));
  http.createServer(server).listen(port);

  const DELAY = 6000;
  const q = queue(MAX_POOL_SIZE > 2 ? MAX_POOL_SIZE - 1 : MAX_POOL_SIZE);

  glob('./**/*.html', {
    cwd: demosRoot,
    root: demosRoot
  }, (err, files) => {
    if (err) throw err;
    console.log('start capturing...');
    each(files, file => {
      const fileBasename = file
        .replace(/\.html$/, '')
        .replace(/^./, '')
        .replace(/\//, '');
      if (fileBasename !== 'index' && !/^assets/.test(fileBasename)) {
        const outputFilename = resolve(screenshotsPath, `./${fileBasename}.png`);
        q.defer(callback => {
          const t0 = Date.now();
          const nightmare = Nightmare({
            show: false
          });
          nightmare
            .viewport(width, height)
            .goto(`http://127.0.0.1:${port}/demos/${file}`)
            .wait('#canvas canvas')
            .wait(DELAY)
            .click('#canvas')
            .screenshot(outputFilename, () => {
              // console.log(`sreenshot token: ${outputFilename}`);
              console.log(`${fileBasename} toke ${Date.now() - t0} to take a screenshot.`);
              callback(null);
            })
            .end()
            .catch(e => {
              console.log(file);
              callback(e);
            });
        });
      }
    });
    q.awaitAll(error => {
      if (error) {
        console.error(error);
        process.exit(1);
      } else {
        console.log('screenshots are all captured!');
        process.exit();
      }
    });
  });
});
