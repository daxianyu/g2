#!/usr/bin/env node
const glob = require('glob');
const cheerio = require('cheerio');
const {
  readFileSync,
  writeFileSync
} = require('fs');
const {
  each,
  forIn,
  kebabCase,
  map
} = require('lodash');
const {
  resolve
} = require('path');

const plotsByGeometry = {};
const demosRoot = resolve(__dirname, '../demos');
const homepageFilename = resolve(demosRoot, './index.html');
const homepageTemplate = readFileSync(resolve(__dirname, './demos-homepage-template.html'), 'utf8');
const $homepage = cheerio.load(homepageTemplate);

function generateMenuItem(plots, geometry) {
  return `<div class="menu-item">
    <h3 class="title">
      <a href="#geometry-${geometry}">${geometry}</a>
    </h3>
    <ul class="sub-menus">
      ${
        map(plots, plot => `<li class="sub-menu-item">
            <a href="#/${plot.id}">${plot.name}</a>
          </li>`
        ).join('')
      }
    </ul>
  </div>`;
}

function generateThumbnailsSection(plots, geometry) {
  return `<div class="thumbnails-section">
    <h3 class="title" id="geometry-${geometry}">
      ${geometry}
    </h3>
    <ul class="thumbnails-container">
      ${
        map(plots, plot => `<li class="thumbnail-item">
            <a href="#/${plot.id}">
              <img class="thumbnail" src="${plot.thumbnail}">
              <div class="description">${plot.name}</div>
            </a>
          </li>`
        ).join('')
      }
    </ul>
  </div>`;
}

glob('./**/*.html', {
  cwd: demosRoot,
  root: demosRoot
}, (err, files) => {
  if (err) throw err;
  each(files, file => {
    const fileBasename = file
      .replace(/\.html$/, '')
      .replace(/^./, '')
      .replace(/\//, '');
    if (fileBasename !== 'index') {
      const filename = resolve(demosRoot, file);
      const $ = cheerio.load(readFileSync(filename, 'utf8'));
      const geometryMetaNode = $('head > meta[name=geometry]')[0];
      if (geometryMetaNode) {
        const geometry = geometryMetaNode.attribs.content;
        const plot = $('head > title').text();
        if (!plotsByGeometry[geometry]) {
          plotsByGeometry[geometry] = [];
        }
        plotsByGeometry[geometry].push({
          id: kebabCase(plot),
          name: plot,
          path: file,
          thumbnail: `./assets/screenshots/800x600/${fileBasename}.png`
        });
      }
    }
  });

  const plotById = {};
  forIn(plotsByGeometry, (plots, geometry) => {
    // generate menus and thumbnails
    $homepage('.menus').append(generateMenuItem(plots, geometry));
    $homepage('.thumbnails').append(generateThumbnailsSection(plots, geometry));
    // prepare global data
    each(plots, plot => {
      plotById[plot.id] = plot;
    });
  });

  // prepare global data
  $homepage('body').prepend(`<script>
  const GLOBAL_DATA = {
    plotById: ${JSON.stringify(plotById)},
    plotsByGeometry: ${JSON.stringify(plotsByGeometry)}
  };
</script>`);


  // write demos homepage
  writeFileSync(homepageFilename, $homepage.html(), 'utf8');
  console.log('homepage generated');
});
